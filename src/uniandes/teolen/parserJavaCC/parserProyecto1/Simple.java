/* Generated By:JavaCC: Do not edit this line. Simple.java */
package uniandes.teolen.parserJavaCC.parserProyecto1;

import java.util.HashMap;
import java.util.Map;

public class Simple implements SimpleConstants {



String []  names = { "title", "author", "journal", "year","volume","editor", "number",
 "pages", "month","doi", "note","key","publisher","series","address", "edition", "url","howPublished", "type", "chapter", "organization", "booktitle", "school", "institution"};

int[] articleRequiredFields = { 0,1,2,3,4 };
int[] bookRequiredFields = { 1,5,0,12,4 }; //Optional to have both 1 and 5 but must have at least one of those two
int[] bookletRequiredFields = { 0 };
int[] inbookRequiredFields = { 1,5,19,12,3}; //Optional to have both 1 and 5 but must have at least one of those two. Same for 19 and 12
int[] conferenceRequiredFields = { 1,0,21,3};
int[] incollectionRequiredFields = { 1,0,12,3};
int[] inproceedingsRequiredFields = { 1,0,21,3};
int[] manualRequiredFields = { 0};
int[] masterthesisRequiredFields = { 1,0,22,3};
int[] phdthesisRequiredFields = {0,1,22,3 };
int[] proceedingsRequiredFields = { 0,3};
int[] techReportRequiredFields = { 0,1,23,3};
int[] unpublishedRequiredFields = { 0,1,10};

HashMap<String, Object> map = new HashMap<String, Object>();

  final public void exp() throws ParseException, Error {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TITLE:
      jj_consume_token(TITLE);
      jj_consume_token(34);
      value(names[0]);
      jj_consume_token(35);
      break;
    case JOURNAL:
      jj_consume_token(JOURNAL);
      jj_consume_token(34);
      value(names[2]);
      jj_consume_token(35);
      break;
    case AUTHOR:
      jj_consume_token(AUTHOR);
      jj_consume_token(34);
      value(names[1]);
      jj_consume_token(35);
      break;
    case YEAR:
      jj_consume_token(YEAR);
      jj_consume_token(34);
      value(names[3]);
      jj_consume_token(35);
      break;
    case VOLUME:
      jj_consume_token(VOLUME);
      jj_consume_token(34);
      value(names[4]);
      jj_consume_token(35);
      break;
    case EDITOR:
      jj_consume_token(EDITOR);
      jj_consume_token(34);
      value(names[5]);
      jj_consume_token(35);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      jj_consume_token(34);
      value(names[6]);
      jj_consume_token(35);
      break;
    case PGS:
      jj_consume_token(PGS);
      jj_consume_token(34);
      value(names[7]);
      jj_consume_token(35);
      break;
    case MONTH:
      jj_consume_token(MONTH);
      jj_consume_token(34);
      value(names[8]);
      jj_consume_token(35);
      break;
    case DPI:
      jj_consume_token(DPI);
      jj_consume_token(34);
      value(names[9]);
      jj_consume_token(35);
      break;
    case NOTE:
      jj_consume_token(NOTE);
      jj_consume_token(34);
      value(names[10]);
      jj_consume_token(35);
      break;
    case KEY:
      jj_consume_token(KEY);
      jj_consume_token(34);
      value(names[11]);
      jj_consume_token(35);
      break;
    case PUBLISHER:
      jj_consume_token(PUBLISHER);
      jj_consume_token(34);
      value(names[12]);
      jj_consume_token(35);
      break;
    case SERIES:
      jj_consume_token(SERIES);
      jj_consume_token(34);
      value(names[13]);
      jj_consume_token(35);
      break;
    case ADDRESS:
      jj_consume_token(ADDRESS);
      jj_consume_token(34);
      value(names[14]);
      jj_consume_token(35);
      break;
    case EDITION:
      jj_consume_token(EDITION);
      jj_consume_token(34);
      value(names[15]);
      jj_consume_token(35);
      break;
    case URL:
      jj_consume_token(URL);
      jj_consume_token(34);
      value(names[16]);
      jj_consume_token(35);
      break;
    case HPUBLISH:
      jj_consume_token(HPUBLISH);
      jj_consume_token(34);
      value(names[17]);
      jj_consume_token(35);
      break;
    case TYP:
      jj_consume_token(TYP);
      jj_consume_token(34);
      value(names[18]);
      jj_consume_token(35);
      break;
    case CHAPTER:
      jj_consume_token(CHAPTER);
      jj_consume_token(34);
      value(names[19]);
      jj_consume_token(35);
      break;
    case ORGA:
      jj_consume_token(ORGA);
      jj_consume_token(34);
      value(names[20]);
      jj_consume_token(35);
      break;
    case BOOKTITLE:
      jj_consume_token(BOOKTITLE);
      jj_consume_token(36);
      value(names[21]);
      jj_consume_token(37);
      break;
    case SCHOOL:
      jj_consume_token(SCHOOL);
      jj_consume_token(36);
      value(names[22]);
      jj_consume_token(37);
      break;
    case INSTITUTION:
      jj_consume_token(INSTITUTION);
      jj_consume_token(36);
      value(names[23]);
      jj_consume_token(37);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public HashMap<String, Object> simple() throws ParseException, Error {
  Token token;
  Token token2;
    token = jj_consume_token(BIBTYPE);
    jj_consume_token(38);
    token2 = jj_consume_token(NAME);
    jj_consume_token(39);
    exp();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(39);
      exp();
    }
    jj_consume_token(40);
    jj_consume_token(END);
if(token.toString().equals("book"))
{
  for(int i: bookRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for book:");
          for(int in: bookRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for book: info in console" );}

        }
 }
}
else if(token.toString().equals("booklet"))
{
        for(int i: bookletRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for booklet:");
          for(int in: bookletRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for booklet: info in console" );}

        }
 }
}
else if(token.toString().equals("article"))
{
        for(int i: articleRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for article:");
          for(int in: articleRequiredFields)
                {
                  if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for article: info in console" );}

        }
 }
}
else if(token.toString().equals("inbook"))
{
        for(int i: inbookRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for inbook:");
          for(int in: inbookRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for inbook: info in console" );}

        }
 }
}
else if(token.toString().equals("conference"))
{
        for(int i: inbookRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for inbook:");
          for(int in: inbookRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for inbook: info in console" );}

        }
 }
}
else if(token.toString().equals("incollection"))
{
        for(int i: inbookRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for inbook:");
          for(int in: inbookRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for inbook: info in console" );}

        }
 }
}
else if(token.toString().equals("inproceedings"))
{
  for(int i: inproceedingsRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for inproceedings:");
          for(int in: inproceedingskRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for inproceedings: info in console" );}

        }
 }
}
else if(token.toString().equals("manual"))
{
  for(int i: manualRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for manualk:");
          for(int in: manualRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for manual: info in console" );}

        }
 }
}
else if(token.toString().equals("masterthesis"))
{
        for(int i: masterthesisRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for masterthesis:");
          for(int in: masterthesisRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for masterthesis: info in console" );}

        }
 }
}
else if(token.toString().equals("phdthesis"))
{
        for(int i: phdthesisRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for phdthesis:");
          for(int in: phdthesisRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for phdthesis: info in console" );}

        }
 }
}
else if(token.toString().equals("proceedings"))
{
        for(int i: proceedingsRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for proceedings:");
          for(int in: proceedingsRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for proceedings: info in console" );}

        }
 }
}
else if(token.toString().equals("techreprot"))
{
        for(int i: techreprotRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for techreprot:");
          for(int in: techreprotRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for techreprot: info in console" );}

        }
 }
}
else if(token.toString().equals("unpublished"))
{
        for(int i: unpublishedRequiredFields)
  {
        if(!map.containsKey(names[i]))
        {
          System.out.println("Entry does not have all the required fields for unpublished:");
          for(int in: unpublishedRequiredFields)
                {
                         if(!map.containsKey(names[in]))
                        System.out.println(names[in] + " missing.");
                }
                {if (true) throw new Error("Entry does not have all the required fields for unpublished: info in console" );}

        }
 }
}

System.out.println("analizando el :  "+ token.image + " con ID: "+token2.image);
System.out.println("number of  properties set:  "+ map.size());



for (int i = 0; i < 1000; i++) {
  if  (map.containsKey(names[i]))
        System.out.println(names[i] +  "=" + (map.get(names[i])).toString());
  else
    System.out.println(names[i] + ":  No value assigned !!!!" );
}



{if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public void value(String name) throws ParseException, Error {
        int total=1;
        Token token;
      if (map.containsKey(name))
         {if (true) throw new Error("Duplicate property: " + name);}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      token = jj_consume_token(INT);
                try {
                        total = Integer.parseInt(token.image);
                }
                catch (NumberFormatException ee)
                {
                        // We know that <INT>  is composed of digits;
                        // The only possible error is that the sequence�s value is too large 
                        {if (true) throw new Error("Number too large: "+token.image);}
                }
                map.put(name,new Integer(total));
      break;
    case NAME:
      token = jj_consume_token(NAME);
      map.put(name,new String(token.image));
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public SimpleTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7fffff80,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80,0x3,};
   }

  /** Constructor with InputStream. */
  public Simple(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Simple(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Simple(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Simple(SimpleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
