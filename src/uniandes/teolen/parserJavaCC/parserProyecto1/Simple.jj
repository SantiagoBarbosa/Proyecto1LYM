/**
 * JavaCC file
 *   Implements a parser for the following grammar
 *       < program > ::=   BEGIN   (< PropName >  =  < value >)*  END
 *        < PropName > ::=   ONE | TWO | THREE |  FOUR
 *        < Value >  ::=     number  |  name
 *   We have a contstraint that must be checked ehen parsing:  there cannot be more than one value assigned to the same  property
 */
options {
  IGNORE_CASE = true;
  STATIC = false;
}
PARSER_BEGIN(Simple)
package uniandes.teolen.parserJavaCC.parserProyecto1;

import java.util.HashMap; 
import java.util.Map;
 
public class Simple {



String []  names = { "article", "book", "booklet", "conference","inbook","incollection", "inproceedings",
 "manual", "mastersthesis","misc", "phdthesis","proceedings","techreport","unpublished"  };

HashMap<String, Object> map = new HashMap<String, Object>();

} 

PARSER_END(Simple)

SKIP :
{
 	" " | "\r" | "\t" | "\n"

}
TOKEN : /* OPERATORS */
{
    <BEGIN: "BEGIN">
  | < ARTICLE: "article" >
  | < BOOK: "book" >
  | < BOOKLET: "booklet" >
  | < CONFERENCE: "conference" >
  | < INBOOK: "inbook">
  | < INCOLLECTION:"incollection">
| < INPROCEEDINGS: "inproceedings">
| < MANUAL: "manual">
| < MASTERSTHESIS: "mastersthesis">
| < MISC:"misc" >
| < PHDTHESIS: "phdthesis">
| < PROCEEDINGS:"proceedings">
| < TECHREPORT:"techreport">
| < UNPUBLISHED: "unpublished">
 |    <END: "END">
	|  < #DIGIT: "0" | "1" | "2"| "3" | "4" | "5" |  "6" | "7" | "8" |"9" >
	|   < INT: ( <DIGIT> )( <DIGIT> )* >
	|   < NAME: ["a"-"z"] (["a"-"z"] | <DIGIT> )* >
   | <FIELDVALUE :  "{"(~["\n","\t"])+ "}"  >
}



HashMap<String, Object> simple()  throws  Error:
{

}
{


 < BEGIN >
(  < ARTICLE > "=" value(names[0])  ";"
| < BOOK > "=" value(names[1]) ";"
| < BOOKLET > "=" value(names[2]) ";"
| < CONFERENCE > "=" value(names[3]) ";"
| < INBOOK> "=" value(names[4])";"
| < INCOLLECTION> "=" value(names[5])";"
| < INPROCEEDINGS> "=" value(names[6])";"
| < MANUAL> "=" value(names[7])";"
| < MASTERSTHESIS> "=" value(names[8])";"
| < MISC> "=" value(names[9])";"
| < PHDTHESIS> "=" value(names[10])";"
| < PROCEEDINGS> "=" value(names[11])";"
| < TECHREPORT> "=" value(names[12])";"
| < UNPUBLISHED> "=" value(names[13])";"
)*
 < END >

{
System.out.println("number of  properties set:  "+ map.size());
for (int i = 0; i < 1000; i++) {
  if  (map.containsKey(names[i]))
  	System.out.println(names[i] +  "=" + (map.get(names[i])).toString());
  else
    System.out.println(names[i] + ":  No value assigned !!!!" );
}
return map;

}

}

 
void value(String name) throws Error:
{	
	int total=1;
	Token token;
}

{
    { if (map.containsKey(name))
         throw new Error("Duplicate property: " + name);
    }

	(token = <INT>

	{ 
		try {
			total = Integer.parseInt(token.image);
		} 
		catch (NumberFormatException ee) 
		{
			// We know that <INT>  is composed of digits;
			// The only possible error is that the sequenceï¿½s value is too large 
			throw new Error("Number too large: "+token.image);
		}
		map.put(name,new Integer(total));
     }
| 
    token=<NAME>
    { map.put(name,new String(token.image));}
  | token = < FIELDVALUE>
  {
    map.put(name, new String (token.image));
  }
)   
     
}