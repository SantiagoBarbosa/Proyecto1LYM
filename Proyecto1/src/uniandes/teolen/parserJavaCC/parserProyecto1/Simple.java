/* Generated By:JavaCC: Do not edit this line. Simple.java */
package uniandes.teolen.parserJavaCC.parserProyecto1;

import java.util.HashMap;
import java.util.Map;

public class Simple implements SimpleConstants {



String []  names = { "article", "book", "booklet", "conference","inbook","incollection", "inproceedings",
 "manual", "mastersthesis","misc", "phdthesis","proceedings","techreport","unpublished"  };

HashMap<String, Object> map = new HashMap<String, Object>();

  final public HashMap<String, Object> simple() throws ParseException, Error {
    jj_consume_token(BEGIN);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARTICLE:
      case BOOK:
      case BOOKLET:
      case CONFERENCE:
      case INBOOK:
      case INCOLLECTION:
      case INPROCEEDINGS:
      case MANUAL:
      case MASTERSTHESIS:
      case MISC:
      case PHDTHESIS:
      case PROCEEDINGS:
      case TECHREPORT:
      case UNPUBLISHED:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARTICLE:
        jj_consume_token(ARTICLE);
        jj_consume_token(25);
        value(names[0]);
        jj_consume_token(26);
        break;
      case BOOK:
        jj_consume_token(BOOK);
        jj_consume_token(25);
        value(names[1]);
        jj_consume_token(26);
        break;
      case BOOKLET:
        jj_consume_token(BOOKLET);
        jj_consume_token(25);
        value(names[2]);
        jj_consume_token(26);
        break;
      case CONFERENCE:
        jj_consume_token(CONFERENCE);
        jj_consume_token(25);
        value(names[3]);
        jj_consume_token(26);
        break;
      case INBOOK:
        jj_consume_token(INBOOK);
        jj_consume_token(25);
        value(names[4]);
        jj_consume_token(26);
        break;
      case INCOLLECTION:
        jj_consume_token(INCOLLECTION);
        jj_consume_token(25);
        value(names[5]);
        jj_consume_token(26);
        break;
      case INPROCEEDINGS:
        jj_consume_token(INPROCEEDINGS);
        jj_consume_token(25);
        value(names[6]);
        jj_consume_token(26);
        break;
      case MANUAL:
        jj_consume_token(MANUAL);
        jj_consume_token(25);
        value(names[7]);
        jj_consume_token(26);
        break;
      case MASTERSTHESIS:
        jj_consume_token(MASTERSTHESIS);
        jj_consume_token(25);
        value(names[8]);
        jj_consume_token(26);
        break;
      case MISC:
        jj_consume_token(MISC);
        jj_consume_token(25);
        value(names[9]);
        jj_consume_token(26);
        break;
      case PHDTHESIS:
        jj_consume_token(PHDTHESIS);
        jj_consume_token(25);
        value(names[10]);
        jj_consume_token(26);
        break;
      case PROCEEDINGS:
        jj_consume_token(PROCEEDINGS);
        jj_consume_token(25);
        value(names[11]);
        jj_consume_token(26);
        break;
      case TECHREPORT:
        jj_consume_token(TECHREPORT);
        jj_consume_token(25);
        value(names[12]);
        jj_consume_token(26);
        break;
      case UNPUBLISHED:
        jj_consume_token(UNPUBLISHED);
        jj_consume_token(25);
        value(names[13]);
        jj_consume_token(26);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(END);
System.out.println("number of  properties set:  "+ map.size());
for (int i = 0; i < 1000; i++) {
  if  (map.containsKey(names[i]))
        System.out.println(names[i] +  "=" + (map.get(names[i])).toString());
  else
    System.out.println(names[i] + ":  No value assigned !!!!" );
}
{if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public void value(String name) throws ParseException, Error {
        int total=1;
        Token token;
      if (map.containsKey(name))
         {if (true) throw new Error("Duplicate property: " + name);}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      token = jj_consume_token(INT);
                try {
                        total = Integer.parseInt(token.image);
                }
                catch (NumberFormatException ee)
                {
                        // We know that <INT>  is composed of digits;
                        // The only possible error is that the sequenceï¿½s value is too large 
                        {if (true) throw new Error("Number too large: "+token.image);}
                }
                map.put(name,new Integer(total));
      break;
    case NAME:
      token = jj_consume_token(NAME);
      map.put(name,new String(token.image));
      break;
    case FIELDVALUE:
      token = jj_consume_token(FIELDVALUE);
    map.put(name, new String (token.image));
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public SimpleTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffc0,0xfffc0,0x1c00000,};
   }

  /** Constructor with InputStream. */
  public Simple(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Simple(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Simple(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Simple(SimpleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
